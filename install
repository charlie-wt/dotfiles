#!/usr/bin/env bash

# install all the repo contents, & some other machine setup. aims to be idempotent.


# === Basic setup ======================================================================
d=$(dirname "$(readlink -e "$0")")  # directory of this script
root="$d"
source "$root/bash/_utils.bash"

# -y or -n options to always pick yes/no at prompts
default_choice=""
if [ "$1" = "-y" ]; then
    default_choice=true
elif [ "$1" = "-n" ]; then
    default_choice=false
fi


# === Symlinking dotfiles ==============================================================
# wrapper around `symlink`, specifically for dotfiles.
#
# $1: name of the file to link to (relative to $root)
# $2: (optional) name of symlink (absolute path). defaults to ~/.$1
function dotfile {
    # params
    local dotfile_name="$1"
    local link_name="${2:-$HOME/.$dotfile_name}"

    symlink "$root/$dotfile_name" "$link_name" "dotfile $dotfile_name"
    return $?
}

title "symlinking dotfiles..."
dotfile bashrc
dotfile gdbinit
dotfile gitconfig       "$(config-home)/git/config"
dotfile kitty.conf      "$(config-home)/kitty/kitty.conf"
dotfile profile
dotfile tmux.conf       "$(config-home)/tmux/tmux.conf"
dotfile vimrc
echo


# === Install scripts ==================================================================
# wrapper around `symlink`, specifically for scripts.
#
# $1: name of file to link to (relative to $root/scripts)
# $1: (optional) installed name of the script. defaults to that of the linked-to file
function install-script {
    # params
    local script_path="$1"
    local script_name="${2:-$(basename $script_path)}"

    local target="$root/scripts/$script_path"
    local link_name="$(bin-home)/$script_name"

    symlink "$target" "$link_name" "$script_path script"

    res=$?
    [ $res -eq 2 ] && >&2 echo "(looking in $root/scripts for scripts; have you set \$root correctly?)"
    return $res
}

title "symlinking scripts..."
install-script branched-from
install-script lightdark
install-script update-clangd
install-script update-kitty
install-script update-vim
echo


# === Other symlinks ===================================================================
title "making other symlinks..."
[ -d "$root/vim" ] && symlink "$root/vim" "$HOME/.vim/personal" "vim personal dir"
echo


# === Other bits =======================================================================
title "doing other misc stuff..."

# make directories for vim swapfiles & backups
mkdir -p "$(state-home)/vim/backups"
mkdir -p "$(state-home)/vim/swaps"
mkdir -p "$(state-home)/vim/undo"

# basic setup for vim plugin manager
vim_plug_loc="$HOME/.vim/autoload/plug.vim"
if [ -e "$vim_plug_loc" ]; then
    skip "plug.vim already exists in $vim_plug_loc"
else
    curl -fLo "$vim_plug_loc" --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

# setup tmux plugin manager
tpm_dir="$(config-home)/tmux/plugins/tpm"
if [ -e "$tpm_dir" ]; then
    skip "tpm already exists in $tpm_dir"
else
    git clone https://github.com/tmux-plugins/tpm "$tpm_dir"
fi

# basic rust setup
rustup_dir="$(data-home)/rustup"
cargo_dir="$(data-home)/cargo"
if [[ -e "$rustup_dir" && -e "$cargo_dir" ]]; then
    skip "rustup & cargo already exist in $rustup_dir & $cargo_dir"
elif [ "$default_choice" != false ]; then
    if [ "$default_choice" = true ] ||
       yesno "do you want to install rust & cargo?"; then
        export RUSTUP_HOME=$rustup_dir
        export CARGO_HOME=$cargo_dir
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
    fi
fi

# python lsp
if have-cmd pylsp; then
    skip "pylsp already installed"
elif have-cmd pip; then
    confirm-action "install pylsp?" && pip install --user python-lsp-server
fi
echo

# kitty theme
kitty_theme_dest="$(config-home)/kitty/theme.conf"
if [ ! -e "$kitty_theme_dest" ]; then
    ln -s "$root/other/gruvbox/kitty/dark.conf" "$kitty_theme_dest"
fi


# === Local ============================================================================
title "doing local install"
# do local install, if present
if [ -x "$root/local/install" ]; then
    root="$d/local"
    . "$root/install"
    root="$d"
elif [ -f "$root/local/install" ]; then
    warn "found a local/install, but it wasn't marked as executable; skipping"
else
    skip "didn't find a local/install"
fi
echo


# === Finish ===========================================================================
# reminders for manual bits i've not automated yet
echo
echo "$(info-col DONE). remember to do these too:"
echo "* run :PluginInstall in vim to install plugins"
echo "* run <prefix>+I in tmux to install plugins"
echo "* do any machine-specific setup in local/{gitconfig,bash/*,vim/*} (then run again)"
echo "* set the user.name & user.email for this repo correctly"

if [[ $(tmux -V) =~ ^tmux\ (0\.|1\.|2\.|3\.0) ]]; then
    echo
    warn "your tmux is too old to understand \$XDG_CONFIG_HOME."
    echo "      best thing is to make bash/local/tmux.bash, with this line:"
    echo
    echo 'alias tmux="tmux -f ${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tmux.conf"'
fi
