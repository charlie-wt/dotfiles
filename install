#!/usr/bin/env bash

# install all the repo contents, & some other machine setup. aims to be idempotent.


# === Basic setup ======================================================================
d=$(dirname "$(readlink -e "$0")")  # directory of this script
source "$d/bash/_utils.bash"

# -y or -n options to always pick yes/no at prompts
default_choice=""
if [ "$1" = "-y" ]; then
    default_choice=true
elif [ "$1" = "-n" ]; then
    default_choice=false
fi

function skip {
    unimportant "$@; skipping"
}

# general function to symlink a file, presenting prompts under various scenarios.
# responds to $default_choice ("true", "false", "").
#
# fails with an error message if the file to link to doesn't exist.
#
# will make any necessary directories that the symlink will sit in.
#
# $1: absolute path of file to link to -- you'll probably want to prepend $d.
# $2: absolute path to symlink to be made.
# $3: human-friendly name of the thing being symlinked, for messages.
#
# returns:
# 0: if the symlink now exists (including if it was already set correctly)
# 1: if the symlink does not now exist (if there was a conflict, and the user cancelled)
# 2: on error
#
# example: `symlink "$d/vimrc" "$HOME/.vimrc" "my vimrc"
function symlink {
    local target="$1"
    local link_name="$2"
    local name="$3"

    if [ ! -e "$target" ]; then
        >&2 echo "$(error "$name"): can't find target $target to symlink"
        return 2
    fi

    if [ -L "$link_name" ]; then
        existing_target=$(readlink -f "$link_name")

        if [ "$existing_target" = "$target" ]; then
            skip "$name already set correctly"
            return 0
        fi

        # link exists -- confirm whether to replace it
        local prompt="$(warn "$name"): '$link_name' exists as a dead link -- replace it?"
        local def_msg="$(warn-pref "'$link_name' exists as a dead link; did not make a new link.")"
        local link_status="dead"
        if [ -e "$existing_target" ]; then
            prompt="$(warn "$name"): '$link_name' already points to '$existing_target'; replace it?"
            def_msg="$(warn-pref "'$link_name' is already a symlink, so did not make a link.")"
            link_status="old"
        fi

        if confirm-action "$prompt" "$def_msg" y; then
            echo "replacing $link_status link for $(info "$name")"
            rm "$link_name"
        else
            return 1
        fi
    elif [ -e "$link_name" ]; then
        if confirm-action "$(warn "$name"): a file at '$link_name' already exists; replace it?" \
                          "$(warn-pref "'$link_name' already exists, so did not make a link.")" \
                          n; then
            echo "replacing old $(info "$name")"
            rm "$link_name"
        else
            return 1
        fi
    fi

    # make a new symlink
    mkdir -p $(dirname "$link_name")
    ln -s "$target" "$link_name"
}


# === Symlinking dotfiles ==============================================================
# wrapper around `symlink`, specifically for dotfiles.
#
# $1: name of the file to link to (relative path, from $d)
# $2: name of symlink (absolute path) -- optional, defaults to ~/.$1
function dotfile {
    # params
    local dotfile_name="$1"
    local link_name="${2:-$HOME/.$dotfile_name}"

    symlink "$d/$dotfile_name" "$link_name" "dotfile $dotfile_name"
    return $?
}

title "symlinking dotfiles..."
dotfile bashrc
dotfile gdbinit
dotfile gitconfig       "$(config-home)/git/config"
dotfile profile
dotfile tmux.conf       "$(config-home)/tmux/tmux.conf"
dotfile vimrc
dotfile kitty.conf      "$(config-home)/kitty/kitty.conf"

dotfile local/gitconfig "$(config-home)/git/local.gitconfig" 2>/dev/null
dotfile local/gitignore "$(config-home)/git/ignore"          2>/dev/null
echo


# === Install scripts ==================================================================
# general function
script_root="$d/scripts"
# wrapper around `symlink`, specifically for scripts.
#
# $1: name of file to link to (relative to $script_root)
# $1: (optional) installed name of the script. defaults to that of the linked-to file
function install-script {
    # params
    local script_path="$1"
    local script_name="${2:-$(basename $script_path)}"

    local target="$script_root/$script_path"
    local link_name="$(bin-home)/$script_name"

    symlink "$target" "$link_name" "$script_path script"

    res=$?
    [ $res -eq 2 ] && >&2 echo "(looking in $script_root for scripts; have you set \$script_root correctly?)"
    return $res
}

title "symlinking scripts..."
install-script update-clangd
install-script update-kitty
echo


# === Symlinking other directories =====================================================
title "symlinking other files..."
[ -e "$d/vim" ]       && symlink "$d/vim"       "$HOME/.vim/personal"       "vim personal dir"
[ -e "$d/local/vim" ] && symlink "$d/local/vim" "$HOME/.vim/personal-local" "vim personal local dir"
echo


# === Other bits =======================================================================
title "doing other misc stuff..."

# make directories for vim swapfiles & backups
mkdir -p "$(state-home)/vim/backups"
mkdir -p "$(state-home)/vim/swaps"
mkdir -p "$(state-home)/vim/undo"

# basic setup for vim plugin manager
vim_plug_loc="$HOME/.vim/autoload/plug.vim"
if [ -e "$vim_plug_loc" ]; then
    skip "plug.vim already exists in $vim_plug_loc"
else
    curl -fLo "$vim_plug_loc" --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

# setup tmux plugin manager
tpm_dir="$(config-home)/tmux/plugins/tpm"
if [ -e "$tpm_dir" ]; then
    skip "tpm already exists in $tpm_dir"
else
    git clone https://github.com/tmux-plugins/tpm "$tpm_dir"
fi

# basic rust setup
rustup_dir="$(data-home)/rustup"
cargo_dir="$(data-home)/cargo"
if [[ -e "$rustup_dir" && -e "$cargo_dir" ]]; then
    skip "rustup & cargo already exist in $rustup_dir & $cargo_dir"
elif [ "$default_choice" != false ]; then
    if [ "$default_choice" = true ] ||
       yesno "do you want to install rust & cargo?"; then
        export RUSTUP_HOME=$rustup_dir
        export CARGO_HOME=$cargo_dir
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
    fi
fi

# python lsp
if have-cmd pylsp; then
    skip "pylsp already installed"
elif have-cmd pip; then
    confirm-action "install pylsp?" && pip install --user python-lsp-server
fi
echo


# === Local ============================================================================
title "doing local install"
# do local install, if present
if [ -x "$d/local/install" ]; then
    script_root="$d/local/scripts"
    . "$d/local/install"
elif [ -f "$d/local/install" ]; then
    warn-pref "found a local/install, but it wasn't marked as executable; skipping"
else
    skip "didn't find a local/install"
fi
echo


# === Finish ===========================================================================
# reminders for manual bits i've not automated yet
echo
echo "$(info DONE). remember to do these too:"
echo "* run :PluginInstall in vim to install plugins"
echo "* run <prefix>+I in tmux to install plugins"
echo "* do any machine-specific setup in local/{gitconfig,bash/*,vim/*} (then run again)"
echo "* set the user.name & user.email for this repo correctly"

if [[ $(tmux -V) =~ ^tmux\ (0\.|1\.|2\.|3\.0) ]]; then
    echo
    warn-pref "your tmux is too old to understand \$XDG_CONFIG_HOME."
    echo "      best thing is to make bash/local/tmux.bash, with this line:"
    echo
    echo 'alias tmux="tmux -f ${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tmux.conf"'
fi
