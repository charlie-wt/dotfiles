#!/bin/env bash

# === Basic vars =======================================================================
# directory of this script
d=$(dirname "$(readlink -f "$0")")

# -y or -n options will always/never remove existing target files
default_choice=""
if [[ $1 = -y ]]; then
    default_choice=true
elif [[ $1 = -n ]]; then
    default_choice=false
fi

# === Aux functions ====================================================================
# yes/no prompt
# $1: the prompt string
# $2: default value (optional) -- can be true or false
# usage: `if yesno "wanna do the thing?" true; then
#             echo did the thing!
#         fi`
function yesno {
        qn=$1
        default=$2

        # set our default based on input
        if [ -z "$default" ]; then
            opts="[y/n]"
            default=""
        elif [ "$default" = true ]; then
            opts="[Y/n]"
            default="y"
        else
            opts="[y/N]"
            default="n"
        fi

        while true; do
            # read input
            read -p "$qn $opts " -n 1 -s -r input
            echo ${input}

            # if nothing entered and have a default, return it
            if [[ -z "$input" && ! -z "$default" ]]; then
                [ "$default" = "y" ] && return 0 || return 1
            fi

            # else if something entered, return if valid
            if [[ "$input" =~ ^[yYnN]$ ]]; then
                input=${input:-${default}}
                [[ "$input" =~ ^[yY]$ ]] && return 0 || return 1
            fi
        done
}

# symlink a dotfile, presenting a prompt (or doing a default behaviour) if there's a conflict
# $1: name of the file (in this directory) to symlink
# $2: directory to symmlink the given file into
function dotfile {
    fname=$1
    target_dir=${2:-~}

    if [[ -e $target_dir/$fname || -h $target_dir/$fname ]]; then
        if [[ $default_choice = true ]]; then
            rm $target_dir/$fname
            ln -s $d/$fname $target_dir/$fname
        elif [[ $default_choice = false ]]; then
            :
        elif yesno "$target_dir/$fname already exists -- delete it?" true; then
            rm $target_dir/$fname
            ln -s $d/$fname $target_dir/$fname
        fi
    else
        ln -s $d/$fname $target_dir/$fname
    fi
}


# === Symlinking =======================================================================
dotfile .bashrc
dotfile .gitconfig
dotfile .tmux.conf
dotfile .vimrc


# === Other bits =======================================================================
# make directories for vim swapfiles & backups
mkdir -p ~/.vim/backups
mkdir -p ~/.vim/swaps

# basic setup for vim plugin manager
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

# setup tmux plugin manager
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

# basic rust setup (removes a warning, presumably generated by tools/cargo.bash)
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --no-modify-path

# reminders for manual bits i've not automated yet
echo
echo remember to run these too:
echo \* :PluginInstall in vim to install plugins
echo \* \<prefix\> I in tmux to install plugins

