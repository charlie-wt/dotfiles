#!/bin/env bash

# === Basic vars =======================================================================
# directory of this script
d=$(dirname "$(readlink -f "$0")")

# -y or -n options to always pick yes/no at prompts
default_choice=""
if [[ $1 = -y ]]; then
    default_choice=true
elif [[ $1 = -n ]]; then
    default_choice=false
fi

# === Aux functions ====================================================================
# yes/no prompt
# $1: the prompt string
# $2: default value (optional) -- can be true or false
# returns: 0 if `yes` chosen; 1 if `no` chosen; if no default was given, will loop
# usage: `if yesno "wanna do the thing?" true; then
#             echo did the thing!
#         fi`
function yesno {
        qn=$1
        default=$2

        # set our default based on input
        if [ -z "$default" ]; then
            opts="[y/n]"
            default=""
        elif [ "$default" = true ]; then
            opts="[Y/n]"
            default="y"
        else
            opts="[y/N]"
            default="n"
        fi

        while true; do
            # read input
            read -p "$qn $opts " -n 1 -s -r input
            echo ${input}

            # if nothing entered and have a default, return it
            if [[ -z "$input" && ! -z "$default" ]]; then
                [ "$default" = "y" ] && return 0 || return 1
            fi

            # else if something entered, return if valid
            if [[ "$input" =~ ^[yYnN]$ ]]; then
                input=${input:-${default}}
                [[ "$input" =~ ^[yY]$ ]] && return 0 || return 1
            fi
        done
}

# symlink a dotfile, presenting a prompt (or doing a default behaviour) if there's a conflict
#
# note: if `$default_choice` is `true` or `false`, follow that instead of presenting a
# prompt in case of conflict.
# $1: name of the file (in this directory) to symlink
# $2: directory to symlink the given file into -- defaults to ~/.$1
# returns: 0 if symlink was made for dotfile; else 1
function dotfile {
    # params
    dotfile_name=$1
    target_name=${2:-~/.$dotfile_name}

    # if `$target_name` exists, check if we should replace it with a new symlink
    if [[ -e $target_name || -L $target_name ]]; then
        if [[ $default_choice = false ]]; then
            echo "WARN: $target_name already exists, so did not make a link."
            return 1
        elif [[ $default_choice = "" ]] &&
             ! yesno "$target_name already exists -- delete it?" true; then
            return 1
        fi
        rm $target_name
    fi

    # make the symlink, including any needed dirs
    mkdir -p $(dirname $target_name)
    ln -s $d/$dotfile_name $target_name
}


# === Symlinking dotfiles ==============================================================
dotfile bashrc
dotfile gitconfig
dotfile tmux.conf ~/.config/tmux/tmux.conf
dotfile vimrc


# === Other bits =======================================================================
# make directories for vim swapfiles & backups
mkdir -p ~/.vim/backups
mkdir -p ~/.vim/swaps

# basic setup for vim plugin manager
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

# setup tmux plugin manager
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

# basic rust setup (removes a warning, presumably generated by tools/cargo.bash)
if [[ $default_choice = true ]] || yesno "do you want to install rust & cargo?"; then
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --no-modify-path
fi

# reminders for manual bits i've not automated yet
echo
echo remember to run these too:
echo \* :PluginInstall in vim to install plugins
echo \* \<prefix\>+I in tmux to install plugins

