#!/usr/bin/env bash

source "$DOTFILES/bash/_utils.bash"

d="$HOME/src/bin/vim"

makefile_changed=0
pull_return_code=0
compile_needed=1

# get sources up-to-date
if [ ! -d "$d" ]; then
    # clone repo if not present
    if ! yesno "$(info "vim not yet cloned; clone now?")"; then
        echo did not clone.
        exit 0
    fi

    parent="$(dirname "$d")"
    mkdir -p "$parent"
    if [ "$?" != 0 ]; then
        >&2 error "failed to create directory $parent for vim clone; exiting"
        exit 1
    fi
    cd "$parent"

    git clone "https://github.com/vim/vim.git"
    pull_return_code="$?"
    cd "$d"
else
    # pull repo if present
    cd "$d"

    # check if makefile has been customised
    git diff --exit-code "$d/src/Makefile" >/dev/null 2>&1
    makefile_changed="$?"

    hash_before="$(git rev-parse HEAD)"

    # update
    git stash
    git pull
    pull_return_code="$?"
    git stash pop

    [ "$hash_before" == "$(git rev-parse HEAD)" ] && compile_needed=0
fi

if [ "$pull_return_code" != 0 ]; then
    >&2 error "git pull failed; not re-making"
    exit "$pull_return_code"
fi

# apply makefile customisation if needed
if [ "$makefile_changed" == 1 ]; then
    skip "Makefile already changed, so not applying patch"
else
    to_apply="$DOTFILES/local/other/vim.patch"
    [ ! -f "$to_apply" ] && to_apply="$DOTFILES/other/vim.patch"

    [ -f "$to_apply" ] && git apply "$to_apply" && compile_needed=1
fi

# rebuild if needed
if [ "$compile_needed" == 1 ]; then
    make reconfig && make
else
    info "already up-to-date; didn't rebuild"
fi