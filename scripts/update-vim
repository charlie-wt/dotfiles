#!/usr/bin/env bash

source "$DOTFILES/bash/_utils.bash"

d="$HOME/src/bin/vim"

makefile_changed=0
compile_needed=1
reconfig_needed=0

# cli
print-usage () {
    echo "usage:"
    echo "  -h   print help."
    echo "  -f   force reconfig & recompile."
}

force_reconfig=0

while getopts 'fh' flag; do
    case "${flag}" in
        f) force_reconfig=1 ;;
        h) echo "update locally-compiled vim; will try to only compile/reconfig if needed." &&
           echo &&
           print-usage &&
           exit 0 ;;
        *) >&2 echo "" && >&2 print-usage && exit 1 ;;
    esac
done

# get sources up-to-date
if [ ! -d "$d" ]; then
    # clone repo if not present
    if ! yesno "$(info "vim not yet cloned; clone now?")"; then
        echo did not clone.
        exit 0
    fi

    parent="$(dirname "$d")"
    if ! mkdir -p "$parent"; then
        >&2 error "failed to create directory $parent for vim clone; exiting"
        exit 1
    fi
    cd "$parent"

    if ! git clone "https://github.com/vim/vim.git"; then
        >&2 error "git clone failed; not building" && exit 1
    fi
    cd "$d"
else
    # pull repo if present
    cd "$d"

    # check if makefile has been customised
    makefile_changed="$(exit-code git diff --exit-code src/Makefile)"
    # not perfect logic as the unstash bumps the date, but good enough for our purposes?
    when_installed_changed="$(date -r src/Makefile +%s)"

    hash_before="$(git rev-parse HEAD)"

    # update
    git stash
    git pull
    pull_return_code="$?"
    git stash pop

    [ "$pull_return_code" != 0 ] && >&2 error "git pull failed; not rebuilding" && exit 1

    [ "$hash_before" == "$(git rev-parse HEAD)" ] && compile_needed=0
fi

# apply makefile customisation if needed
to_apply="$DOTFILES/local/other/vim.patch"
[ ! -f "$to_apply" ] && to_apply="$DOTFILES/other/vim.patch"
if [ -f "$to_apply" ]; then
    if [ "$makefile_changed" == 0 ]; then
        should_apply=1
    else
        when_dotfiles_changed="$(git -C "${to_apply%/other/vim.patch}" log -1 --pretty="format:%ct" "$to_apply")"
        if [ "$when_dotfiles_changed" -ge "$when_installed_changed" ]; then
            yesno "$(warn "dotfiles makefile newer than your modifications; overwrite from dotfiles?")" \
            && should_apply=1
        fi
    fi

    [ "$should_apply" == 1 ] \
    && git checkout @ -- src/Makefile \
    && git apply "$to_apply" \
    && reconfig_needed=1
fi

# rebuild if needed
if [[ "$reconfig_needed" == 1 || "$force_reconfig" == 1 ]]; then
    make reconfig && make
elif [ "$compile_needed" == 1 ]; then
    make
else
    info "already up-to-date; didn't rebuild"
fi